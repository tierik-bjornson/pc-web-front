pipeline {
    agent any

    environment {
        NODE_VERSION = '18' // Phi√™n b·∫£n Node.js c·∫ßn thi·∫øt
    }

    stages {
        stage('Prepare Environment') {
            steps {
                script {
                    // C√†i ƒë·∫∑t Node.js
                    sh '''
                    curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash -
                    apt-get install -y nodejs
                    node -v
                    npm -v
                    '''
                }
            }
        }

        stage('Checkout Code') {
            steps {
                // Clone repository
                git branch: 'main',
                    url: 'https://github.com/tierik-bjornson/pc-web-front.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    // C√†i ƒë·∫∑t dependencies cho c·∫£ admin v√† user
                    def modules = ['admin', 'user']
                    for (module in modules) {
                        dir(module) {
                            sh 'npm install'
                        }
                    }
                }
            }
        }

        stage('Build Projects') {
            steps {
                script {
                    // Build c·∫£ admin v√† user
                    def modules = ['admin', 'user']
                    for (module in modules) {
                        dir(module) {
                            sh 'npm run build'
                        }
                    }
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                // L∆∞u tr·ªØ c√°c file build
                archiveArtifacts artifacts: '**/dist/**', fingerprint: true
            }
        }

        stage('Deploy') {
            steps {
                echo 'Tri·ªÉn khai ·ª©ng d·ª•ng...'
                // Th√™m c√°c b∆∞·ªõc tri·ªÉn khai t·∫°i ƒë√¢y
            }
        }
    }

    post {
        success {
            echo 'üéâ Build v√† tri·ªÉn khai th√†nh c√¥ng!'
        }
        failure {
            echo '‚ùå Build ho·∫∑c tri·ªÉn khai th·∫•t b·∫°i!'
        }
    }
}
