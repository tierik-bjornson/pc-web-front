pipeline {
    agent any
    tools {
        nodejs "Node18"
    }
    environment {
        REGISTRY = 'localhost:80'
        PROJECT = 'pc-web-front'
        IMAGE_NAME = 'pc-web-front-image'
        HARBOR_CREDS = 'harbor-credentials'
        DOCKER_IMAGE_TAG = "${env.BUILD_NUMBER}"
    }
    stages {
        stage('Start') {
            steps {
                script {
                    echo "üöÄ Pipeline b·∫Øt ƒë·∫ßu ch·∫°y!"
                }
            }
        }
        stage('Checkout Source Code') {
            steps {
                script {
                    echo "üîÑ ƒêang clone repository source code..."
                    git url: 'https://github.com/tierik-bjornson/pc-web-front.git', branch: 'main', depth: 1
                    echo "‚úÖ Clone source code th√†nh c√¥ng!"
                }
            }
        }
        stage('Check Files') {
            steps {
                script {
                    echo "üìÇ Ki·ªÉm tra th∆∞ m·ª•c sau khi clone:"
                    sh 'ls -la'
                    sh 'find . -name package.json || echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y package.json!"'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    echo "üì¶ C√†i ƒë·∫∑t dependencies..."
                    if (fileExists('admin/package.json')) {
                        dir('admin') {
                            sh 'npm install'
                        }
                    } else {
                        echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y package.json trong admin!"
                    }

                    if (fileExists('user/package.json')) {
                        dir('user') {
                            sh 'npm install'
                        }
                    } else {
                        echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y package.json trong user!"
                    }
                    echo "‚úÖ C√†i ƒë·∫∑t ho√†n t·∫•t!"
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    echo "üõ† B·∫Øt ƒë·∫ßu build..."
                    if (fileExists('admin/package.json')) {
                        dir('admin') {
                            sh 'npm run build --prod'
                        }
                    }
                    if (fileExists('user/package.json')) {
                        dir('user') {
                            sh 'npm run build --prod'
                        }
                    }
                    echo "‚úÖ Build ho√†n t·∫•t!"
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    echo "üß™ Ch·∫°y test..."
                    if (fileExists('admin/package.json')) {
                        dir('admin') {
                            sh 'npm run test || echo "‚ö†Ô∏è No tests specified, skipping..."'
                        }
                    }
                    if (fileExists('user/package.json')) {
                        dir('user') {
                            sh 'npm run test || echo "‚ö†Ô∏è No tests specified, skipping..."'
                        }
                    }
                    echo "‚úÖ Test xong!"
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo "üê≥ Build Docker image..."
                    sh """
                    docker build -t ${REGISTRY}/${PROJECT}/${IMAGE_NAME}:${DOCKER_IMAGE_TAG} .
                    """
                    echo "‚úÖ Build Docker image ho√†n t·∫•t!"
                }
            }
        }
        stage('Push Image to Harbor') {
            steps {
                script {
                    echo "üì§ Push image l√™n Harbor..."
                    sh """
                    docker login ${REGISTRY} -u admin -p password
                    docker push ${REGISTRY}/${PROJECT}/${IMAGE_NAME}:${DOCKER_IMAGE_TAG}
                    """
                    echo "‚úÖ Push image th√†nh c√¥ng!"
                }
            }
        }
        stage('Cleanup') {
            steps {
                script {
                    echo "üßπ D·ªçn d·∫πp Docker image..."
                    sh "docker rmi ${REGISTRY}/${PROJECT}/${IMAGE_NAME}:${DOCKER_IMAGE_TAG} || true"
                    echo "‚úÖ D·ªçn d·∫πp ho√†n t·∫•t!"
                }
            }
        }
    }
    post {
        success {
            echo 'üéâ Build v√† push l√™n Harbor th√†nh c√¥ng! Repo deploy ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.'
        }
        failure {
            echo '‚ùå Build th·∫•t b·∫°i. Ki·ªÉm tra logs ƒë·ªÉ xem chi ti·∫øt.'
        }
    }
}


